!function(n){function e(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var r={};e.m=n,e.c=r,e.i=function(n){return n},e.d=function(n,r,t){e.o(n,r)||Object.defineProperty(n,r,{configurable:!1,enumerable:!0,get:t})},e.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(r,"a",r),r},e.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},e.p="./",e(e.s=26)}([function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Number isNumber\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Returns true is the passed\r\n * argument is type of number\r\n *\r\n * isNumber(5)\r\n * => true\r\n *\r\n * isNumber('5')\r\n * => false\r\n *\r\n * @param  {Any} value\r\n * @return {Number}\r\n */\nvar isNumber = function isNumber(value) {\n  return Number.isInteger(value) && !Number.isNaN(value);\n};\n\nexports.default = isNumber;\n\n//////////////////\n// WEBPACK FOOTER\n// ./number/isNumber.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./number/isNumber.js?")},function(e,r,t){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\n/**\r\n * @brief Objects isObject\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Checks if the passed in argument\r\n * is type of Object\r\n *\r\n * isObject({});\r\n * => true\r\n *\r\n * @param  {Any} value\r\n * @return {Boolean}\r\n */\nvar isObject = function isObject(value) {\n  return value && (typeof value === \'undefined\' ? \'undefined\' : _typeof(value)) === \'object\' && !Array.isArray(value);\n};\n\nexports.default = isObject;\n\n//////////////////\n// WEBPACK FOOTER\n// ./object/isObject.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./object/isObject.js?')},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Array First\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Returns the first value of passed array\r\n *\r\n * diff([1,2,3,4])\r\n * => 1\r\n *\r\n * @param  {Array} first\r\n * @param  {Array} second\r\n * @return {Array}\r\n */\nvar first = function first(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error('First() expects argument one to be type of Array');\n  }\n  return arr[0];\n};\n\nexports.default = first;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/first.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/first.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _first = __webpack_require__(2);\n\nvar _first2 = _interopRequireDefault(_first);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar intersection = function intersection() {\n  for (var _len = arguments.length, arrays = Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  arrays.forEach(function (arr, i) {\n    if (!Array.isArray(arr)) {\n      throw new Error('Intersection expects argument ' + (i + 1) + ' to be of type Array.');\n    }\n  });\n\n  return (0, _first2.default)(arrays).filter(function (val) {\n    return arrays.slice(1).every(function (arr) {\n      return arr.includes(val);\n    });\n  });\n}; /**\n    * @brief Array Intersection\n    * @author James Coventry <james.coventry@readingroom.com>\n    * @details Takes in multiple array types and returns\n    * all values contained in every array\n    *\n    * intersection([1,2,3,4],[2,3,4],[1,2,2,3,3])\n    * => [2,3]\n    *\n    * @param  {Array} arr\n    * @return {Array}\n    */\nexports.default = intersection;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/intersection.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/intersection.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * @brief Collection hasOne\n * @author John Hopley <jhopley@readingroom.com>\n * @details Joins entries from one collection to\n * another using a primary and foreign key to\n * identifiy the relationship\n *\n *  const people = [\n *    {\n *      id: 2,\n *      name: 'steff',\n *      age: 27,\n *    }\n *   ]\n *\n *  const addresses = [\n *    {\n *      id: 1,\n *      person_id: 2,\n *      postcode: 'l12pa'\n *    }\n *  ];\n *\n *  hasOne(people, addresses, 'id', 'person_id', 'address')\n *  => [{\n *    id: 2,\n *    name: 'steff',\n *    age: 27,\n *    address: {\n *      id: 1,\n *      person_id: 2,\n *      postcode: 'l12pa'\n *    }\n *  }]\n *\n * @param  {Collection} collection\n * @param  {Collection} Join\n * @param  {String} primaryKey\n * @param  {String} foreignKey\n * @return {Collection}\n */\nvar hasOne = function hasOne(collection, join, primaryKey, foreignKey) {\n  var key = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'hasOne';\n\n  if (!Array.isArray(collection) || !Array.isArray(join)) {\n    throw new Error('HasOne expects agurment one and two to be\\n       type of Array (collection)');\n  } else if (primaryKey === null) {\n    throw new Error('HasMany expects argument three to\\n       be type of string ' + (typeof primaryKey === 'undefined' ? 'undefined' : _typeof(primaryKey)) + ' given');\n  } else if (foreignKey === undefined) {\n    throw new Error('HasMany expects argument three to\\n       be type of string ' + (typeof foreignKey === 'undefined' ? 'undefined' : _typeof(foreignKey)) + ' given');\n  }\n\n  var cltn = collection;\n\n  collection.forEach(function (item, index) {\n    var id = item[primaryKey];\n\n    cltn[index][key] = join.filter(function (tvalue) {\n      var macth = false;\n      Object.keys(tvalue).forEach(function (prop) {\n        if (prop === foreignKey && tvalue[prop] === id) {\n          macth = true;\n        }\n      });\n      return macth;\n    })[0];\n  });\n\n  return cltn;\n};\n\nexports.default = hasOne;\n\n//////////////////\n// WEBPACK FOOTER\n// ./collection/hasOne.js\n// module id = 4\n// module chunks = 0\n\n//# sourceURL=webpack:///./collection/hasOne.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Array Chunks\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Splits array into chunks using the specifed size.\r\n *\r\n * chunks([1,2,3,4,5,6,7,8,9, 10], 3)\r\n * => [[1,2,3],[4,5,6],[7,8,9],[10]]\r\n *\r\n * @param  {Array} arr\r\n * @param  {Number} size\r\n * @return {Array}\r\n */\nvar chunk = function chunk(arr, size) {\n  if (!Array.isArray(arr)) {\n    throw new Error('Chunk expects argument one to be type of array.');\n  }\n\n  var len = {\n    length: Math.ceil(arr.length / size)\n  };\n\n  return Array.from(len).map(function (value, index) {\n    return arr.slice(index * size, index * size + size);\n  });\n};\n\nexports.default = chunk;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/chunk.js\n// module id = 5\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/chunk.js?")},function(e,r,t){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\r\n * @brief Array Compress\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Takes in multiple array types and merges\r\n * into a new array accordingly\r\n *\r\n * compress([1,2,3,4],[5,6,7],[8,9,10])\r\n * => [[1,2,3,4],[5,6,7],[8,9,10]]\r\n *\r\n * @param  {Array} arr\r\n * @return {Array}\r\n */\n\nvar compress = function compress() {\n  for (var _len = arguments.length, arrays = Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  arrays.forEach(function (arr, i) {\n    if (!Array.isArray(arr)) {\n      throw new Error("compress expects argument " + (i + 1) + " to be of type Array.");\n    }\n  });\n  return [].concat(_toConsumableArray(Array.from(arrays)));\n};\n\nexports.default = compress;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/compress.js\n// module id = 6\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/compress.js?')},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Array Diff\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Retuns the diffrence between two arrays\r\n *\r\n * diff([1,2,3,4],[1,2,3,4,5,6,7])\r\n * => [5,6,7]\r\n *\r\n * @param  {Array} first\r\n * @param  {Array} second\r\n * @return {Array}\r\n */\nvar diff = function diff(first, second) {\n  if (!Array.isArray(first) || !Array.isArray(second)) {\n    throw new Error('Diff expects argument one and two to be type of array.');\n  }\n\n  return first.filter(function (value) {\n    return second.includes(value);\n  });\n};\n\nexports.default = diff;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/diff.js\n// module id = 7\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/diff.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\r\n * @brief Array Flatten\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Flattens nested arrays\r\n *\r\n * flatten([1,[2],[[3]]])\r\n * => [1,2,3]\r\n *\r\n * @param  {Array} arr\r\n * @return {Array}\r\n */\nvar flatten = function flatten(arr) {\n  var _ref;\n\n  if (!Array.isArray(arr)) {\n    throw new Error('Flatten expects argument one to be type of array.');\n  }\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arr));\n};\n\nexports.default = flatten;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/flatten.js\n// module id = 8\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/flatten.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Array last\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Retuns the last value of the passed in array\r\n *\r\n * Flatten([1,2,3,4,5])\r\n * => 5\r\n *\r\n * @param  {Array} arr\r\n * @return {Array}\r\n */\nvar last = function last(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error('Last() expects argument one to be type of Array');\n  }\n  return arr[arr.length - 1];\n};\n\nexports.default = last;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/last.js\n// module id = 9\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/last.js?")},function(e,r,t){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\r\n * @brief Array merge\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Meges all values from all\r\n * passed in array arugments in to the\r\n * onw array\r\n *\r\n * merge([1,2,3,4],[5,6,7,8],[9,10])\r\n * => [1,2,3,4,5,6,7,8,9,10]\r\n *\r\n * @param  {Array} args\r\n * @return {Array}\r\n */\nvar merge = function merge() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.reduce(function (index, value) {\n    return [].concat(_toConsumableArray(index), _toConsumableArray(value));\n  });\n};\n\nexports.default = merge;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/merge.js\n// module id = 10\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/merge.js?')},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Array occurrences\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Returns the amount of occurrences\r\n * of a value in the passed array\r\n *\r\n * occurrences([1,2,1,2,1,2,1],2)\r\n * => 3\r\n *\r\n * @param  {Array} arr\r\n * @param  {Array} needle\r\n * @return {Array}\r\n */\nvar occurrences = function occurrences(arr, needle) {\n  if (!Array.isArray(arr)) {\n    throw new Error('Occurrences expects argument one to be type of Array');\n  }\n\n  var occurs = 0;\n\n  arr.forEach(function (item) {\n    if (item === needle) {\n      occurs += 1;\n    }\n  });\n\n  return occurs;\n};\n\nexports.default = occurrences;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/occurrences.js\n// module id = 11\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/occurrences.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNumber = __webpack_require__(0);\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar pick = function pick(arr, index) {\n  if (!Array.isArray(arr)) {\n    throw new Error('Pick expects argument one to be type of Array');\n  } else if (!(0, _isNumber2.default)(index)) {\n    throw new Error('Pick expects argument two to be type of Number (int).');\n  }\n\n  if (arr[index] === undefined) {\n    return false;\n  }\n  return arr[index];\n}; /**\r\n    * @brief Array pick\r\n    * @author John Hopley <jhopley@readingroom.com>\r\n    * @dependency {number.isNumber}\r\n    * @details Retuns the array value by index\r\n    * if it exists in the given array\r\n    *\r\n    * pick(['John', 'Is', 'King'], 2)\r\n    * => 'King'\r\n    *\r\n    * @param  {Array} arr\r\n    * @param  {Array} index\r\n    * @return {Array}\r\n    */\nexports.default = pick;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/pick.js\n// module id = 12\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/pick.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNumber = __webpack_require__(0);\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar range = function range() {\n  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var start = arguments[1];\n  var end = arguments[2];\n\n  if (!Array.isArray(arr)) {\n    throw new Error('Range expects argument one to be type of Array');\n  } else if (!(0, _isNumber2.default)(start) || !(0, _isNumber2.default)(end)) {\n    throw new Error('Rage expects argument two and three to be type of Number');\n  }\n\n  return arr.filter(function (value, index) {\n    if (index >= start && index <= end) {\n      return true;\n    }\n    return false;\n  });\n}; /**\r\n    * @brief Array range\r\n    * @author John Hopley <jhopley@readingroom.com>\r\n    * @dependency {number.isNumber}\r\n    * @details Retuns the values of an array\r\n    * between the start and end arguments\r\n    *\r\n    * range([1,2,3,4,5,6,7,8,9], 4, 9)\r\n    * => [5,6,7,8,9]\r\n    *\r\n    * @param  {Array} arr\r\n    * @param  {Number} start\r\n    * @param  {Number} end\r\n    * @return {Array}\r\n    */\nexports.default = range;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/range.js\n// module id = 13\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/range.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Array shuffle\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Returns all the values from the\r\n * passed array in a randomised order\r\n *\r\n * shuffle([1,2,3,4,5,6])\r\n * => [2,5,4,1,3,6]\r\n *\r\n * @param  {Array} arr\r\n * @return {Array}\r\n */\nvar shuffle = function shuffle(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error('Random expects argument one to be type of array.');\n  }\n\n  return arr.map(function (val) {\n    return [Math.random(), val];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n};\n\nexports.default = shuffle;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/shuffle.js\n// module id = 14\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/shuffle.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\r\n * @brief Array unique\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Removes all dublicate entries\r\n * from the passed array\r\n *\r\n * unique([1,1,1,2,2,3])\r\n * => [1,2,3]\r\n *\r\n * @param  {Array} arr\r\n * @return {Array}\r\n */\nvar unique = function unique(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error('Unique expects agrument one to be type of array.');\n  }\n  return [].concat(_toConsumableArray(new Set(arr)));\n};\n\nexports.default = unique;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/unique.js\n// module id = 15\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/unique.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * @brief Array without\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Removes all specified values from the passed array\r\n *\r\n * without(['John', 'Cambo', 'Dan', 'Tom']], 'Tom', 'Dan');\r\n * => ['John', 'Cambo']\r\n *\r\n * @param  {Array} arr\r\n * @return {Array}\r\n */\nvar without = function without() {\n  for (var _len = arguments.length, arr = Array(_len), _key = 0; _key < _len; _key++) {\n    arr[_key] = arguments[_key];\n  }\n\n  if (!Array.isArray(arr)) {\n    throw new Error('Without expects argument one to be type of Array');\n  }\n\n  var exclude = Array.from(arr).filter(function (i) {\n    return i > 0;\n  });\n\n  return arr[0].filter(function (value) {\n    return !exclude.includes(value);\n  });\n};\n\nexports.default = without;\n\n//////////////////\n// WEBPACK FOOTER\n// ./array/without.js\n// module id = 16\n// module chunks = 0\n\n//# sourceURL=webpack:///./array/without.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * @brief Collection hasMany\n                                                                                                                                                                                                                                                                               * @author John Hopley <jhopley@readingroom.com>\n                                                                                                                                                                                                                                                                               * @details Joins entries from one collection to\n                                                                                                                                                                                                                                                                               * multiple others using a primary and foreign key to\n                                                                                                                                                                                                                                                                               * identifiy the relationship\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  const people = [\n                                                                                                                                                                                                                                                                               *    {\n                                                                                                                                                                                                                                                                               *      id: 2,\n                                                                                                                                                                                                                                                                               *      name: 'steff',\n                                                                                                                                                                                                                                                                               *      age: 27,\n                                                                                                                                                                                                                                                                               *    }\n                                                                                                                                                                                                                                                                               *   ]\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  const addresses = [\n                                                                                                                                                                                                                                                                               *    {\n                                                                                                                                                                                                                                                                               *      id: 1,\n                                                                                                                                                                                                                                                                               *      person_id: 2,\n                                                                                                                                                                                                                                                                               *      postcode: 'l12pa'\n                                                                                                                                                                                                                                                                               *    }\n                                                                                                                                                                                                                                                                               *  ];\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  const info = [\n                                                                                                                                                                                                                                                                               *    {\n                                                                                                                                                                                                                                                                               *      id: 1,\n                                                                                                                                                                                                                                                                               *      person_id: 2,\n                                                                                                                                                                                                                                                                               *      bio: 'Steff loves his ginger locks.'\n                                                                                                                                                                                                                                                                               *    }\n                                                                                                                                                                                                                                                                               *  ];\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               *  hasMany(people, 'id', 'person_id', addresses, info)\n                                                                                                                                                                                                                                                                               *  => [{\n                                                                                                                                                                                                                                                                               *    id: 2,\n                                                                                                                                                                                                                                                                               *    name: 'steff',\n                                                                                                                                                                                                                                                                               *    age: 27,\n                                                                                                                                                                                                                                                                               *    address: {\n                                                                                                                                                                                                                                                                               *      id: 1,\n                                                                                                                                                                                                                                                                               *      person_id: 2,\n                                                                                                                                                                                                                                                                               *      postcode: 'l12pa'\n                                                                                                                                                                                                                                                                               *    },\n                                                                                                                                                                                                                                                                               *    info: {\n                                                                                                                                                                                                                                                                               *      id: 1,\n                                                                                                                                                                                                                                                                               *      person_id: 2,\n                                                                                                                                                                                                                                                                               *      bio: 'Steff loves his ginger locks.'\n                                                                                                                                                                                                                                                                               *    }\n                                                                                                                                                                                                                                                                               *  }]\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @param  {Collection} collection\n                                                                                                                                                                                                                                                                               * @param  {String} primaryKey\n                                                                                                                                                                                                                                                                               * @param  {String} foreignKey\n                                                                                                                                                                                                                                                                               * @param. {...Collection} collections\n                                                                                                                                                                                                                                                                               * @return {Collection}\n                                                                                                                                                                                                                                                                               */\n\n\nvar _hasOne = __webpack_require__(4);\n\nvar _hasOne2 = _interopRequireDefault(_hasOne);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hasMany = function hasMany(collection, primaryKey, foreignKey, collections) {\n  if (!Array.isArray(collection)) {\n    throw new Error('HasOne expects agurment one and two to be\\n       type of Array (collection)');\n  } else if (primaryKey === null) {\n    throw new Error('HasMany expects argument three to\\n       be type of string ' + (typeof primaryKey === 'undefined' ? 'undefined' : _typeof(primaryKey)) + ' given');\n  } else if (foreignKey === undefined) {\n    throw new Error('HasMany expects argument three to\\n       be type of string ' + (typeof foreignKey === 'undefined' ? 'undefined' : _typeof(foreignKey)) + ' given');\n  }\n\n  var cltn = collection;\n\n  Object.keys(collections).forEach(function (prop) {\n    if (!Array.isArray(collections[prop])) {\n      throw new Error('All collection are expected to a collections ([{},..])');\n    }\n\n    cltn = (0, _hasOne2.default)(cltn, collections[prop], primaryKey, foreignKey, prop);\n  });\n\n  return cltn;\n};\n\nexports.default = hasMany;\n\n//////////////////\n// WEBPACK FOOTER\n// ./collection/hasMany.js\n// module id = 17\n// module chunks = 0\n\n//# sourceURL=webpack:///./collection/hasMany.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @brief Collection Pluck\n * @author John Hopley <jhopley@readingroom.com>\n * @details Plucks and returns all instances of the\n * specified property in a collection of objects.\n *\n * let people = [\n *   {\n *     name: 'John Hopley',\n *     height: '6ft 6\"',\n *     age 32,\n *    }\n *    {\n *      name: 'Cambo',\n *      height: '5ft 1\"',\n *      age 54\n *    }\n * ];\n *\n * pluck(people, 'name');\n *\n * => ['John Hopley', 'Cambo']\n *\n * @param  {Collection} collection\n * @param  {String} property\n * @return {Collection}\n */\nvar pluck = function pluck(collection, property) {\n  return collection.map(function (value) {\n    return value[property];\n  });\n};\n\nexports.default = pluck;\n\n//////////////////\n// WEBPACK FOOTER\n// ./collection/pluck.js\n// module id = 18\n// module chunks = 0\n\n//# sourceURL=webpack:///./collection/pluck.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _intersection = __webpack_require__(3);\n\nvar _intersection2 = _interopRequireDefault(_intersection);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**\n                                                                                                                                                                                                                   * @brief Collection where\n                                                                                                                                                                                                                   * @author John Hopley <jhopley@readingroom.com>\n                                                                                                                                                                                                                   * @details Takes in a collection returns only the\n                                                                                                                                                                                                                   * items that watch the conditions (object:param2)\n                                                                                                                                                                                                                   * let people = [\n                                                                                                                                                                                                                   *   {\n                                                                                                                                                                                                                   *     name: 'John Hopley',\n                                                                                                                                                                                                                   *     jobcode: 12,\n                                                                                                                                                                                                                   *     office: 'Liverpool'\n                                                                                                                                                                                                                   *   },\n                                                                                                                                                                                                                   *   {\n                                                                                                                                                                                                                   *     name: 'Lee Easeman',\n                                                                                                                                                                                                                   *     jobcode: 12,\n                                                                                                                                                                                                                   *     office: 'London'\n                                                                                                                                                                                                                   *   },\n                                                                                                                                                                                                                   *   {\n                                                                                                                                                                                                                   *     name: 'Eric Jones',\n                                                                                                                                                                                                                   *     jobcode: 14,\n                                                                                                                                                                                                                   *     office: 'Liverpool'\n                                                                                                                                                                                                                   *   }\n                                                                                                                                                                                                                   * ];\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * where(people, {jobcode: 14, office: 'Liverpool'})\n                                                                                                                                                                                                                   * => [{\n                                                                                                                                                                                                                   *   name: 'Eric Jones',\n                                                                                                                                                                                                                   *   jobcode: 14,\n                                                                                                                                                                                                                   *   office: 'Liverpool'\n                                                                                                                                                                                                                   * }]\n                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                   * @param  {Collection} collection\n                                                                                                                                                                                                                   * @param  {Object} condition\n                                                                                                                                                                                                                   * @return {Collection}\n                                                                                                                                                                                                                   */\n\n\nvar where = function where(collection, condition) {\n  var conditionCount = Object.keys(condition).length;\n\n  return collection.filter(function (value) {\n    var intersec = (0, _intersection2.default)(Object.keys(condition), Object.keys(value));\n    if (intersec.length === conditionCount) {\n      var values = {};\n\n      intersec.forEach(function (prop) {\n        return Object.assign(values, _defineProperty({}, prop, value[prop]));\n      });\n      return JSON.stringify(values) === JSON.stringify(condition);\n    }\n    return false;\n  });\n};\n\nexports.default = where;\n\n//////////////////\n// WEBPACK FOOTER\n// ./collection/where.js\n// module id = 19\n// module chunks = 0\n\n//# sourceURL=webpack:///./collection/where.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar on = function on(selector, eventTypes, callback) {\n  if (typeof selector !== 'string') {\n    throw new Error('Funckit on method requires aurgument one to be a \\n       valid string selector ');\n  }\n\n  undefined.elements = document.querySelectorAll(selector);\n\n  if (!Array.isArray(eventTypes)) {\n    undefined.eventTypes = [eventTypes];\n  } else {\n    undefined.eventTypes = eventTypes;\n  }\n\n  undefined.elements.forEach(function (element) {\n    undefined.eventTypes.forEach(function (eventType) {\n      element.addEventListener(eventType, function (event) {\n        callback(event);\n      });\n    });\n  });\n};\n\nexports.default = on;\n\n//////////////////\n// WEBPACK FOOTER\n// ./events/on.js\n// module id = 20\n// module chunks = 0\n\n//# sourceURL=webpack:///./events/on.js?")},function(e,r,t){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n/**\r\n * @brief Number between\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Returns a random number between\r\n * the min and max given in aurguments\r\n *\r\n * between(5,10)\r\n * => 6\r\n *\r\n * @param  {Number} min\r\n*  @param  {Nubmer} max\r\n * @return {Number}\r\n */\nvar between = function between(min, max) {\n  return Math.floor(Math.random() * (max - min) + (1 + min));\n};\n\nexports.default = between;\n\n//////////////////\n// WEBPACK FOOTER\n// ./number/between.js\n// module id = 21\n// module chunks = 0\n\n//# sourceURL=webpack:///./number/between.js?')},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isObject = __webpack_require__(1);\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**\r\n                                                                                                                                                                                                                   * @brief Objects deepAssign\r\n                                                                                                                                                                                                                   * @author John Hopley <jhopley@readingroom.com>\r\n                                                                                                                                                                                                                   * @details Extends recursively\r\n                                                                                                                                                                                                                   * over multidimensional objects using Object.assign.\r\n                                                                                                                                                                                                                   *\r\n                                                                                                                                                                                                                   * deepAssign({\r\n                                                                                                                                                                                                                   *   name: 'John',\r\n                                                                                                                                                                                                                   *   age: 25,\r\n                                                                                                                                                                                                                   *   info: {\r\n                                                                                                                                                                                                                   *     email: null,\r\n                                                                                                                                                                                                                   *   }\r\n                                                                                                                                                                                                                   * }, {\r\n                                                                                                                                                                                                                   *   info: {\r\n                                                                                                                                                                                                                   *     email: 'xxx@xxxx.com',\r\n                                                                                                                                                                                                                   *     address: {\r\n                                                                                                                                                                                                                   *       postcode: 'xxxx'\r\n                                                                                                                                                                                                                   *     }\r\n                                                                                                                                                                                                                   *   }\r\n                                                                                                                                                                                                                   * })\r\n                                                                                                                                                                                                                   *\r\n                                                                                                                                                                                                                   *  => {\r\n                                                                                                                                                                                                                   *   name: 'John',\r\n                                                                                                                                                                                                                   *   age: 25,\r\n                                                                                                                                                                                                                   *   info: {\r\n                                                                                                                                                                                                                   *   email: 'xxx@xxxx.com',\r\n                                                                                                                                                                                                                   *   address: {\r\n                                                                                                                                                                                                                   *     postcode: 'xxxx'\r\n                                                                                                                                                                                                                   *   }\r\n                                                                                                                                                                                                                   * }\r\n                                                                                                                                                                                                                   *\r\n                                                                                                                                                                                                                   * @param  {Object} original\r\n                                                                                                                                                                                                                   * @param  {Object} target\r\n                                                                                                                                                                                                                   * @return {Object}\r\n                                                                                                                                                                                                                   */\n\n\nvar assignDeep = function assignDeep(original) {\n  for (var _len = arguments.length, target = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    target[_key - 1] = arguments[_key];\n  }\n\n  if (!target.length) {\n    return original;\n  }\n\n  var source = target.shift();\n\n  if (!(0, _isObject2.default)(original) || !(0, _isObject2.default)(source)) {\n    throw new Error('Assign recursive expects argument one and two to be type of object.');\n  }\n\n  Object.keys(source).forEach(function (key) {\n    if ((0, _isObject2.default)(source[key])) {\n      if (!original[key]) {\n        Object.assign(original, _defineProperty({}, key, {}));\n      }\n      assignDeep(original[key], source[key]);\n    } else {\n      Object.assign(original, _defineProperty({}, key, source[key]));\n    }\n  });\n\n  return assignDeep.apply(undefined, [original].concat(target));\n};\n\nexports.default = assignDeep;\n\n//////////////////\n// WEBPACK FOOTER\n// ./object/assignDeep.js\n// module id = 22\n// module chunks = 0\n\n//# sourceURL=webpack:///./object/assignDeep.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isObject = __webpack_require__(1);\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar clone = function clone(obj) {\n  if (!(0, _isObject2.default)(obj)) {\n    throw new Error('Clone expects argument one to be type of object');\n  }\n  return Object.assign({}, obj);\n}; /**\r\n    * @brief Objects clone\r\n    * @author John Hopley <jhopley@readingroom.com>\r\n    * @dependency {object.isObject}\r\n    * @details Returns clone of immutable object\r\n    *\r\n    * clone({name: 'John Hopley'})\r\n    * => {name: 'John Hopley'}\r\n    *\r\n    * @param  {Object} obj\r\n    * @return {Object}\r\n    */\nexports.default = clone;\n\n//////////////////\n// WEBPACK FOOTER\n// ./object/clone.js\n// module id = 23\n// module chunks = 0\n\n//# sourceURL=webpack:///./object/clone.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * @brief Objects objectFlatten\n * @author John Hopley <jhopley@readingroom.com>\n * @details Recursively flatten multidimensional objects\n *\n * objectFlatten({\n *   name: 'John Hopley',\n *   address: {\n *     postcode: 'xxxx',\n *     city: 'Liverpool'\n *   }\n * });\n *\n * => {\n *   '/name': 'John Hopley',\n *   '/address/postcode': 'xxxx',\n *   '/address/city': 'Liverpool',\n * }\n *\n * @param  {Object} obj\n * @return {Object}\n */\nvar objectFlatten = function objectFlatten(obj) {\n  var _ftn = function _ftn(piece) {\n    var _ref;\n\n    var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    return (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(piece).map(function (key) {\n      return _typeof(piece[key]) === 'object' ? _ftn(piece[key], dir + '/' + key) : _defineProperty({}, dir + '/' + key, piece[key]);\n    })));\n  };\n\n  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(_ftn(obj))));\n};\n\nexports.default = objectFlatten;\n\n//////////////////\n// WEBPACK FOOTER\n// ./object/objectFlatten.js\n// module id = 24\n// module chunks = 0\n\n//# sourceURL=webpack:///./object/objectFlatten.js?")},function(e,r,t){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n * @brief Object types\r\n * @author John Hopley <jhopley@readingroom.com>\r\n * @details Retuns an object describing\r\n * the property types of passed object\r\n *\r\n * types({\r\n *   doSomething: () => {},\r\n *   doNothing: false,\r\n *   count: 5,\r\n *   trigger: 'click',\r\n *   meta: {}\r\n * })\r\n *\r\n * => {\r\n *   doSomething: 'function'\r\n *   doNothing: 'boolean',\r\n *   count: 'number',\r\n *   trigger: 'string',\r\n *   meta: 'object'\r\n * }\r\n *\r\n * @param  {Object} obj\r\n * @return {Boolean}\r\n */\nvar types = function types(obj) {\n  var tps = {};\n\n  Object.keys(obj).forEach(function (prop) {\n    var type = void 0;\n\n    if (_typeof(obj[prop]) === 'object') {\n      if (Array.isArray(obj[prop])) {\n        type = 'array';\n      } else if (obj[prop] === null) {\n        type = 'null';\n      } else {\n        type = 'object';\n      }\n    } else {\n      type = _typeof(obj[prop]);\n    }\n    tps[prop] = type;\n  });\n\n  return tps;\n};\n\nexports.default = types;\n\n//////////////////\n// WEBPACK FOOTER\n// ./object/types.js\n// module id = 25\n// module chunks = 0\n\n//# sourceURL=webpack:///./object/types.js?")},function(e,r,t){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nexports.on = exports.objectFlatten = exports.types = exports.isObject = exports.clone = exports.assignDeep = exports.isNumber = exports.between = exports.where = exports.pluck = exports.hasOne = exports.hasMany = exports.without = exports.unique = exports.shuffle = exports.range = exports.pick = exports.occurrences = exports.merge = exports.last = exports.intersection = exports.flatten = exports.first = exports.diff = exports.compress = exports.chunk = undefined;\n\nvar _chunk = __webpack_require__(5);\n\nvar _chunk2 = _interopRequireDefault(_chunk);\n\nvar _compress = __webpack_require__(6);\n\nvar _compress2 = _interopRequireDefault(_compress);\n\nvar _diff = __webpack_require__(7);\n\nvar _diff2 = _interopRequireDefault(_diff);\n\nvar _first = __webpack_require__(2);\n\nvar _first2 = _interopRequireDefault(_first);\n\nvar _flatten = __webpack_require__(8);\n\nvar _flatten2 = _interopRequireDefault(_flatten);\n\nvar _intersection = __webpack_require__(3);\n\nvar _intersection2 = _interopRequireDefault(_intersection);\n\nvar _last = __webpack_require__(9);\n\nvar _last2 = _interopRequireDefault(_last);\n\nvar _merge = __webpack_require__(10);\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _occurrences = __webpack_require__(11);\n\nvar _occurrences2 = _interopRequireDefault(_occurrences);\n\nvar _pick = __webpack_require__(12);\n\nvar _pick2 = _interopRequireDefault(_pick);\n\nvar _range = __webpack_require__(13);\n\nvar _range2 = _interopRequireDefault(_range);\n\nvar _shuffle = __webpack_require__(14);\n\nvar _shuffle2 = _interopRequireDefault(_shuffle);\n\nvar _unique = __webpack_require__(15);\n\nvar _unique2 = _interopRequireDefault(_unique);\n\nvar _without = __webpack_require__(16);\n\nvar _without2 = _interopRequireDefault(_without);\n\nvar _hasMany = __webpack_require__(17);\n\nvar _hasMany2 = _interopRequireDefault(_hasMany);\n\nvar _hasOne = __webpack_require__(4);\n\nvar _hasOne2 = _interopRequireDefault(_hasOne);\n\nvar _pluck = __webpack_require__(18);\n\nvar _pluck2 = _interopRequireDefault(_pluck);\n\nvar _where = __webpack_require__(19);\n\nvar _where2 = _interopRequireDefault(_where);\n\nvar _between = __webpack_require__(21);\n\nvar _between2 = _interopRequireDefault(_between);\n\nvar _isNumber = __webpack_require__(0);\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _assignDeep = __webpack_require__(22);\n\nvar _assignDeep2 = _interopRequireDefault(_assignDeep);\n\nvar _clone = __webpack_require__(23);\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _isObject = __webpack_require__(1);\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nvar _types = __webpack_require__(25);\n\nvar _types2 = _interopRequireDefault(_types);\n\nvar _objectFlatten = __webpack_require__(24);\n\nvar _objectFlatten2 = _interopRequireDefault(_objectFlatten);\n\nvar _on = __webpack_require__(20);\n\nvar _on2 = _interopRequireDefault(_on);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable no-unused-vars */\n\nexports.chunk = _chunk2.default;\nexports.compress = _compress2.default;\nexports.diff = _diff2.default;\nexports.first = _first2.default;\nexports.flatten = _flatten2.default;\nexports.intersection = _intersection2.default;\nexports.last = _last2.default;\nexports.merge = _merge2.default;\nexports.occurrences = _occurrences2.default;\nexports.pick = _pick2.default;\nexports.range = _range2.default;\nexports.shuffle = _shuffle2.default;\nexports.unique = _unique2.default;\nexports.without = _without2.default;\nexports.hasMany = _hasMany2.default;\nexports.hasOne = _hasOne2.default;\nexports.pluck = _pluck2.default;\nexports.where = _where2.default;\nexports.between = _between2.default;\nexports.isNumber = _isNumber2.default;\nexports.assignDeep = _assignDeep2.default;\nexports.clone = _clone2.default;\nexports.isObject = _isObject2.default;\nexports.types = _types2.default;\nexports.objectFlatten = _objectFlatten2.default;\nexports.on = _on2.default;\n\n//////////////////\n// WEBPACK FOOTER\n// ./entry.js\n// module id = 26\n// module chunks = 0\n\n//# sourceURL=webpack:///./entry.js?')}]);